#!/usr/bin/env bash

# Route in-container commands via docker-compose
for REPLY in imposer composer wp dba; do have "$REPLY" || catbin "$REPLY" <<EOF
#!/usr/bin/env bash
exec doco $REPLY "\$@"
EOF
done

loco_exec() {
    doco "$@";  # Delegate unknown commands to doco
}

have-any mysql     || mysql()     {
    docker run --rm -it arey/mysql-client "$@"
}
have-any mysqldump || mysqldump() {
    docker run --rm -it --entrypoint mysqldump arey/mysql-client "$@"
}

dk.bootstrap() {
    require-any doco basher install bashup/doco
    require-any jq
    require-any docker-compose
    mkdir -p deploy vendor
}

dk.setup() {
    dk bootstrap

    # Generate db config
    [[ -f .env ]] || cp example.env .env
    .env --file .env
    .env generate DB_ROOTUSER echo root
    .env generate DB_ROOTPASS gen-pass

    .env --file deploy/all.env
    .env generate WP_ADMIN_USER whoami
    .env generate WP_ADMIN_EMAIL echo "$USER@$HOSTNAME"
    .env generate WP_ADMIN_PASS openssl rand -base64 8

    # Generate any needed WP config data for all containers
    set -- prod stage dev
    while (($#)); do
        .env --file deploy/"$1".env
        .env generate DB_USER echo "$1"
        .env generate DB_PASSWORD gen-pass
        wp-keygen
        shift
    done

    # Build the mantle image
    doco build dev
}

gen-key() { openssl rand -base64 48; }
gen-pass() { openssl rand -base64 18; }

wp-keygen() {
    set -- AUTH SECURE_AUTH LOGGED_IN NONCE
    while (($#)); do
        .env generate "$1_KEY" gen-key
        .env generate "$1_SALT" gen-key
        shift
    done
}

